Terminals unused in grammar

    ":="


Grammar

    0 $accept: program $end

    1 empty: ε

    2 program: block "."

    3 block: "begin" constDecls varDecls procDecls stmts "end"

    4 constDecls: empty
    5           | constDecls constDecl

    6 constDecl: "const" constDefList ";"

    7 constDefList: constDef
    8             | constDefList "," constDef

    9 constDef: identsym "=" numbersym

   10 varDecls: empty
   11         | varDecls varDecl

   12 varDecl: "var" identList ";"

   13 identList: identsym
   14          | identList "," identsym

   15 procDecls: empty
   16          | procDecls procDecl

   17 procDecl: "proc" identsym block ";"

   18 stmts: empty
   19      | stmtList

   20 stmtList: stmt
   21         | stmtList ";" stmt

   22 stmt: assignStmt
   23     | callStmt
   24     | ifStmt
   25     | whileStmt
   26     | readStmt
   27     | printStmt
   28     | blockStmt

   29 blockStmt: "begin" stmts "end"

   30 assignStmt: identsym "becomes" expr

   31 callStmt: "call" identsym

   32 ifStmt: "if" condition "then" stmts "else" stmts "end"
   33       | "if" condition "then" stmts "end"

   34 whileStmt: "while" condition "do" stmts "end"

   35 readStmt: "read" identsym

   36 printStmt: "print" expr

   37 expr: expr "+" term
   38     | expr "-" term
   39     | term

   40 term: term "*" factor
   41     | term "/" factor
   42     | factor

   43 factor: identsym
   44       | numbersym
   45       | "(" expr ")"

   46 condition: dbCondition
   47          | relOpCondition

   48 dbCondition: "divisible" expr "by" expr

   49 relOpCondition: expr relOp expr

   50 relOp: "=="
   51      | "!="
   52      | "<"
   53      | "<="
   54      | ">"
   55      | ">="


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 9 13 14 17 30 31 35 43
    numbersym <number> (259) 9 44
    "+" <token> (260) 37
    "-" <token> (261) 38
    "*" <token> (262) 40
    "/" <token> (263) 41
    "." <token> (264) 2
    ";" <token> (265) 6 12 17 21
    "=" <token> (266) 9
    "," <token> (267) 8 14
    ":=" <token> (268)
    "(" <token> (269) 45
    ")" <token> (270) 45
    "const" <token> (271) 6
    "var" <token> (272) 12
    "proc" <token> (273) 17
    "call" <token> (274) 31
    "begin" <token> (275) 3 29
    "end" <token> (276) 3 29 32 33 34
    "if" <token> (277) 32 33
    "then" <token> (278) 32 33
    "else" <token> (279) 32
    "while" <token> (280) 34
    "do" <token> (281) 34
    "read" <token> (282) 35
    "print" <token> (283) 36
    "divisible" <token> (284) 48
    "by" <token> (285) 48
    "==" <token> (286) 50
    "!=" <token> (287) 51
    "<" <token> (288) 52
    "<=" <token> (289) 53
    ">" <token> (290) 54
    ">=" <token> (291) 55
    "becomes" (292) 30


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    empty <empty> (39)
        on left: 1
        on right: 4 10 15 18
    program <block> (40)
        on left: 2
        on right: 0
    block <block> (41)
        on left: 3
        on right: 2 17
    constDecls <const_decls> (42)
        on left: 4 5
        on right: 3 5
    constDecl <const_decl> (43)
        on left: 6
        on right: 5
    constDefList <const_def_list> (44)
        on left: 7 8
        on right: 6 8
    constDef <const_def> (45)
        on left: 9
        on right: 7 8
    varDecls <var_decls> (46)
        on left: 10 11
        on right: 3 11
    varDecl <var_decl> (47)
        on left: 12
        on right: 11
    identList <ident_list> (48)
        on left: 13 14
        on right: 12 14
    procDecls <proc_decls> (49)
        on left: 15 16
        on right: 3 16
    procDecl <proc_decl> (50)
        on left: 17
        on right: 16
    stmts <stmts> (51)
        on left: 18 19
        on right: 3 29 32 33 34
    stmtList <stmt_list> (52)
        on left: 20 21
        on right: 19 21
    stmt <stmt> (53)
        on left: 22 23 24 25 26 27 28
        on right: 20 21
    blockStmt <block_stmt> (54)
        on left: 29
        on right: 28
    assignStmt <assign_stmt> (55)
        on left: 30
        on right: 22
    callStmt <call_stmt> (56)
        on left: 31
        on right: 23
    ifStmt <if_stmt> (57)
        on left: 32 33
        on right: 24
    whileStmt <while_stmt> (58)
        on left: 34
        on right: 25
    readStmt <read_stmt> (59)
        on left: 35
        on right: 26
    printStmt <print_stmt> (60)
        on left: 36
        on right: 27
    expr <expr> (61)
        on left: 37 38 39
        on right: 30 36 37 38 45 48 49
    term <expr> (62)
        on left: 40 41 42
        on right: 37 38 39 40 41
    factor <expr> (63)
        on left: 43 44 45
        on right: 40 41 42
    condition <condition> (64)
        on left: 46 47
        on right: 32 33 34
    dbCondition <db_condition> (65)
        on left: 48
        on right: 46
    relOpCondition <rel_op_condition> (66)
        on left: 49
        on right: 47
    relOp <token> (67)
        on left: 50 51 52 53 54 55
        on right: 49


State 0

    0 $accept: • program $end

    "begin"  shift, and go to state 1

    program  go to state 2
    block    go to state 3


State 1

    3 block: "begin" • constDecls varDecls procDecls stmts "end"

    $default  reduce using rule 1 (empty)

    empty       go to state 4
    constDecls  go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    2 program: block • "."

    "."  shift, and go to state 7


State 4

    4 constDecls: empty •

    $default  reduce using rule 4 (constDecls)


State 5

    3 block: "begin" constDecls • varDecls procDecls stmts "end"
    5 constDecls: constDecls • constDecl

    "const"  shift, and go to state 8

    $default  reduce using rule 1 (empty)

    empty      go to state 9
    constDecl  go to state 10
    varDecls   go to state 11


State 6

    0 $accept: program $end •

    $default  accept


State 7

    2 program: block "." •

    $default  reduce using rule 2 (program)


State 8

    6 constDecl: "const" • constDefList ";"

    identsym  shift, and go to state 12

    constDefList  go to state 13
    constDef      go to state 14


State 9

   10 varDecls: empty •

    $default  reduce using rule 10 (varDecls)


State 10

    5 constDecls: constDecls constDecl •

    $default  reduce using rule 5 (constDecls)


State 11

    3 block: "begin" constDecls varDecls • procDecls stmts "end"
   11 varDecls: varDecls • varDecl

    "var"  shift, and go to state 15

    $default  reduce using rule 1 (empty)

    empty      go to state 16
    varDecl    go to state 17
    procDecls  go to state 18


State 12

    9 constDef: identsym • "=" numbersym

    "="  shift, and go to state 19


State 13

    6 constDecl: "const" constDefList • ";"
    8 constDefList: constDefList • "," constDef

    ";"  shift, and go to state 20
    ","  shift, and go to state 21


State 14

    7 constDefList: constDef •

    $default  reduce using rule 7 (constDefList)


State 15

   12 varDecl: "var" • identList ";"

    identsym  shift, and go to state 22

    identList  go to state 23


State 16

   15 procDecls: empty •

    $default  reduce using rule 15 (procDecls)


State 17

   11 varDecls: varDecls varDecl •

    $default  reduce using rule 11 (varDecls)


State 18

    3 block: "begin" constDecls varDecls procDecls • stmts "end"
   16 procDecls: procDecls • procDecl

    identsym  shift, and go to state 24
    "proc"    shift, and go to state 25
    "call"    shift, and go to state 26
    "begin"   shift, and go to state 27
    "if"      shift, and go to state 28
    "while"   shift, and go to state 29
    "read"    shift, and go to state 30
    "print"   shift, and go to state 31

    $default  reduce using rule 1 (empty)

    empty       go to state 32
    procDecl    go to state 33
    stmts       go to state 34
    stmtList    go to state 35
    stmt        go to state 36
    blockStmt   go to state 37
    assignStmt  go to state 38
    callStmt    go to state 39
    ifStmt      go to state 40
    whileStmt   go to state 41
    readStmt    go to state 42
    printStmt   go to state 43


State 19

    9 constDef: identsym "=" • numbersym

    numbersym  shift, and go to state 44


State 20

    6 constDecl: "const" constDefList ";" •

    $default  reduce using rule 6 (constDecl)


State 21

    8 constDefList: constDefList "," • constDef

    identsym  shift, and go to state 12

    constDef  go to state 45


State 22

   13 identList: identsym •

    $default  reduce using rule 13 (identList)


State 23

   12 varDecl: "var" identList • ";"
   14 identList: identList • "," identsym

    ";"  shift, and go to state 46
    ","  shift, and go to state 47


State 24

   30 assignStmt: identsym • "becomes" expr

    "becomes"  shift, and go to state 48


State 25

   17 procDecl: "proc" • identsym block ";"

    identsym  shift, and go to state 49


State 26

   31 callStmt: "call" • identsym

    identsym  shift, and go to state 50


State 27

   29 blockStmt: "begin" • stmts "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 26
    "begin"   shift, and go to state 27
    "if"      shift, and go to state 28
    "while"   shift, and go to state 29
    "read"    shift, and go to state 30
    "print"   shift, and go to state 31

    $default  reduce using rule 1 (empty)

    empty       go to state 32
    stmts       go to state 51
    stmtList    go to state 35
    stmt        go to state 36
    blockStmt   go to state 37
    assignStmt  go to state 38
    callStmt    go to state 39
    ifStmt      go to state 40
    whileStmt   go to state 41
    readStmt    go to state 42
    printStmt   go to state 43


State 28

   32 ifStmt: "if" • condition "then" stmts "else" stmts "end"
   33       | "if" • condition "then" stmts "end"

    identsym     shift, and go to state 52
    numbersym    shift, and go to state 53
    "("          shift, and go to state 54
    "divisible"  shift, and go to state 55

    expr            go to state 56
    term            go to state 57
    factor          go to state 58
    condition       go to state 59
    dbCondition     go to state 60
    relOpCondition  go to state 61


State 29

   34 whileStmt: "while" • condition "do" stmts "end"

    identsym     shift, and go to state 52
    numbersym    shift, and go to state 53
    "("          shift, and go to state 54
    "divisible"  shift, and go to state 55

    expr            go to state 56
    term            go to state 57
    factor          go to state 58
    condition       go to state 62
    dbCondition     go to state 60
    relOpCondition  go to state 61


State 30

   35 readStmt: "read" • identsym

    identsym  shift, and go to state 63


State 31

   36 printStmt: "print" • expr

    identsym   shift, and go to state 52
    numbersym  shift, and go to state 53
    "("        shift, and go to state 54

    expr    go to state 64
    term    go to state 57
    factor  go to state 58


State 32

   18 stmts: empty •

    $default  reduce using rule 18 (stmts)


State 33

   16 procDecls: procDecls procDecl •

    $default  reduce using rule 16 (procDecls)


State 34

    3 block: "begin" constDecls varDecls procDecls stmts • "end"

    "end"  shift, and go to state 65


State 35

   19 stmts: stmtList •
   21 stmtList: stmtList • ";" stmt

    ";"  shift, and go to state 66

    $default  reduce using rule 19 (stmts)


State 36

   20 stmtList: stmt •

    $default  reduce using rule 20 (stmtList)


State 37

   28 stmt: blockStmt •

    $default  reduce using rule 28 (stmt)


State 38

   22 stmt: assignStmt •

    $default  reduce using rule 22 (stmt)


State 39

   23 stmt: callStmt •

    $default  reduce using rule 23 (stmt)


State 40

   24 stmt: ifStmt •

    $default  reduce using rule 24 (stmt)


State 41

   25 stmt: whileStmt •

    $default  reduce using rule 25 (stmt)


State 42

   26 stmt: readStmt •

    $default  reduce using rule 26 (stmt)


State 43

   27 stmt: printStmt •

    $default  reduce using rule 27 (stmt)


State 44

    9 constDef: identsym "=" numbersym •

    $default  reduce using rule 9 (constDef)


State 45

    8 constDefList: constDefList "," constDef •

    $default  reduce using rule 8 (constDefList)


State 46

   12 varDecl: "var" identList ";" •

    $default  reduce using rule 12 (varDecl)


State 47

   14 identList: identList "," • identsym

    identsym  shift, and go to state 67


State 48

   30 assignStmt: identsym "becomes" • expr

    identsym   shift, and go to state 52
    numbersym  shift, and go to state 53
    "("        shift, and go to state 54

    expr    go to state 68
    term    go to state 57
    factor  go to state 58


State 49

   17 procDecl: "proc" identsym • block ";"

    "begin"  shift, and go to state 1

    block  go to state 69


State 50

   31 callStmt: "call" identsym •

    $default  reduce using rule 31 (callStmt)


State 51

   29 blockStmt: "begin" stmts • "end"

    "end"  shift, and go to state 70


State 52

   43 factor: identsym •

    $default  reduce using rule 43 (factor)


State 53

   44 factor: numbersym •

    $default  reduce using rule 44 (factor)


State 54

   45 factor: "(" • expr ")"

    identsym   shift, and go to state 52
    numbersym  shift, and go to state 53
    "("        shift, and go to state 54

    expr    go to state 71
    term    go to state 57
    factor  go to state 58


State 55

   48 dbCondition: "divisible" • expr "by" expr

    identsym   shift, and go to state 52
    numbersym  shift, and go to state 53
    "("        shift, and go to state 54

    expr    go to state 72
    term    go to state 57
    factor  go to state 58


State 56

   37 expr: expr • "+" term
   38     | expr • "-" term
   49 relOpCondition: expr • relOp expr

    "+"   shift, and go to state 73
    "-"   shift, and go to state 74
    "=="  shift, and go to state 75
    "!="  shift, and go to state 76
    "<"   shift, and go to state 77
    "<="  shift, and go to state 78
    ">"   shift, and go to state 79
    ">="  shift, and go to state 80

    relOp  go to state 81


State 57

   39 expr: term •
   40 term: term • "*" factor
   41     | term • "/" factor

    "*"  shift, and go to state 82
    "/"  shift, and go to state 83

    $default  reduce using rule 39 (expr)


State 58

   42 term: factor •

    $default  reduce using rule 42 (term)


State 59

   32 ifStmt: "if" condition • "then" stmts "else" stmts "end"
   33       | "if" condition • "then" stmts "end"

    "then"  shift, and go to state 84


State 60

   46 condition: dbCondition •

    $default  reduce using rule 46 (condition)


State 61

   47 condition: relOpCondition •

    $default  reduce using rule 47 (condition)


State 62

   34 whileStmt: "while" condition • "do" stmts "end"

    "do"  shift, and go to state 85


State 63

   35 readStmt: "read" identsym •

    $default  reduce using rule 35 (readStmt)


State 64

   36 printStmt: "print" expr •
   37 expr: expr • "+" term
   38     | expr • "-" term

    "+"  shift, and go to state 73
    "-"  shift, and go to state 74

    $default  reduce using rule 36 (printStmt)


State 65

    3 block: "begin" constDecls varDecls procDecls stmts "end" •

    $default  reduce using rule 3 (block)


State 66

   21 stmtList: stmtList ";" • stmt

    identsym  shift, and go to state 24
    "call"    shift, and go to state 26
    "begin"   shift, and go to state 27
    "if"      shift, and go to state 28
    "while"   shift, and go to state 29
    "read"    shift, and go to state 30
    "print"   shift, and go to state 31

    stmt        go to state 86
    blockStmt   go to state 37
    assignStmt  go to state 38
    callStmt    go to state 39
    ifStmt      go to state 40
    whileStmt   go to state 41
    readStmt    go to state 42
    printStmt   go to state 43


State 67

   14 identList: identList "," identsym •

    $default  reduce using rule 14 (identList)


State 68

   30 assignStmt: identsym "becomes" expr •
   37 expr: expr • "+" term
   38     | expr • "-" term

    "+"  shift, and go to state 73
    "-"  shift, and go to state 74

    $default  reduce using rule 30 (assignStmt)


State 69

   17 procDecl: "proc" identsym block • ";"

    ";"  shift, and go to state 87


State 70

   29 blockStmt: "begin" stmts "end" •

    $default  reduce using rule 29 (blockStmt)


State 71

   37 expr: expr • "+" term
   38     | expr • "-" term
   45 factor: "(" expr • ")"

    "+"  shift, and go to state 73
    "-"  shift, and go to state 74
    ")"  shift, and go to state 88


State 72

   37 expr: expr • "+" term
   38     | expr • "-" term
   48 dbCondition: "divisible" expr • "by" expr

    "+"   shift, and go to state 73
    "-"   shift, and go to state 74
    "by"  shift, and go to state 89


State 73

   37 expr: expr "+" • term

    identsym   shift, and go to state 52
    numbersym  shift, and go to state 53
    "("        shift, and go to state 54

    term    go to state 90
    factor  go to state 58


State 74

   38 expr: expr "-" • term

    identsym   shift, and go to state 52
    numbersym  shift, and go to state 53
    "("        shift, and go to state 54

    term    go to state 91
    factor  go to state 58


State 75

   50 relOp: "==" •

    $default  reduce using rule 50 (relOp)


State 76

   51 relOp: "!=" •

    $default  reduce using rule 51 (relOp)


State 77

   52 relOp: "<" •

    $default  reduce using rule 52 (relOp)


State 78

   53 relOp: "<=" •

    $default  reduce using rule 53 (relOp)


State 79

   54 relOp: ">" •

    $default  reduce using rule 54 (relOp)


State 80

   55 relOp: ">=" •

    $default  reduce using rule 55 (relOp)


State 81

   49 relOpCondition: expr relOp • expr

    identsym   shift, and go to state 52
    numbersym  shift, and go to state 53
    "("        shift, and go to state 54

    expr    go to state 92
    term    go to state 57
    factor  go to state 58


State 82

   40 term: term "*" • factor

    identsym   shift, and go to state 52
    numbersym  shift, and go to state 53
    "("        shift, and go to state 54

    factor  go to state 93


State 83

   41 term: term "/" • factor

    identsym   shift, and go to state 52
    numbersym  shift, and go to state 53
    "("        shift, and go to state 54

    factor  go to state 94


State 84

   32 ifStmt: "if" condition "then" • stmts "else" stmts "end"
   33       | "if" condition "then" • stmts "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 26
    "begin"   shift, and go to state 27
    "if"      shift, and go to state 28
    "while"   shift, and go to state 29
    "read"    shift, and go to state 30
    "print"   shift, and go to state 31

    $default  reduce using rule 1 (empty)

    empty       go to state 32
    stmts       go to state 95
    stmtList    go to state 35
    stmt        go to state 36
    blockStmt   go to state 37
    assignStmt  go to state 38
    callStmt    go to state 39
    ifStmt      go to state 40
    whileStmt   go to state 41
    readStmt    go to state 42
    printStmt   go to state 43


State 85

   34 whileStmt: "while" condition "do" • stmts "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 26
    "begin"   shift, and go to state 27
    "if"      shift, and go to state 28
    "while"   shift, and go to state 29
    "read"    shift, and go to state 30
    "print"   shift, and go to state 31

    $default  reduce using rule 1 (empty)

    empty       go to state 32
    stmts       go to state 96
    stmtList    go to state 35
    stmt        go to state 36
    blockStmt   go to state 37
    assignStmt  go to state 38
    callStmt    go to state 39
    ifStmt      go to state 40
    whileStmt   go to state 41
    readStmt    go to state 42
    printStmt   go to state 43


State 86

   21 stmtList: stmtList ";" stmt •

    $default  reduce using rule 21 (stmtList)


State 87

   17 procDecl: "proc" identsym block ";" •

    $default  reduce using rule 17 (procDecl)


State 88

   45 factor: "(" expr ")" •

    $default  reduce using rule 45 (factor)


State 89

   48 dbCondition: "divisible" expr "by" • expr

    identsym   shift, and go to state 52
    numbersym  shift, and go to state 53
    "("        shift, and go to state 54

    expr    go to state 97
    term    go to state 57
    factor  go to state 58


State 90

   37 expr: expr "+" term •
   40 term: term • "*" factor
   41     | term • "/" factor

    "*"  shift, and go to state 82
    "/"  shift, and go to state 83

    $default  reduce using rule 37 (expr)


State 91

   38 expr: expr "-" term •
   40 term: term • "*" factor
   41     | term • "/" factor

    "*"  shift, and go to state 82
    "/"  shift, and go to state 83

    $default  reduce using rule 38 (expr)


State 92

   37 expr: expr • "+" term
   38     | expr • "-" term
   49 relOpCondition: expr relOp expr •

    "+"  shift, and go to state 73
    "-"  shift, and go to state 74

    $default  reduce using rule 49 (relOpCondition)


State 93

   40 term: term "*" factor •

    $default  reduce using rule 40 (term)


State 94

   41 term: term "/" factor •

    $default  reduce using rule 41 (term)


State 95

   32 ifStmt: "if" condition "then" stmts • "else" stmts "end"
   33       | "if" condition "then" stmts • "end"

    "end"   shift, and go to state 98
    "else"  shift, and go to state 99


State 96

   34 whileStmt: "while" condition "do" stmts • "end"

    "end"  shift, and go to state 100


State 97

   37 expr: expr • "+" term
   38     | expr • "-" term
   48 dbCondition: "divisible" expr "by" expr •

    "+"  shift, and go to state 73
    "-"  shift, and go to state 74

    $default  reduce using rule 48 (dbCondition)


State 98

   33 ifStmt: "if" condition "then" stmts "end" •

    $default  reduce using rule 33 (ifStmt)


State 99

   32 ifStmt: "if" condition "then" stmts "else" • stmts "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 26
    "begin"   shift, and go to state 27
    "if"      shift, and go to state 28
    "while"   shift, and go to state 29
    "read"    shift, and go to state 30
    "print"   shift, and go to state 31

    $default  reduce using rule 1 (empty)

    empty       go to state 32
    stmts       go to state 101
    stmtList    go to state 35
    stmt        go to state 36
    blockStmt   go to state 37
    assignStmt  go to state 38
    callStmt    go to state 39
    ifStmt      go to state 40
    whileStmt   go to state 41
    readStmt    go to state 42
    printStmt   go to state 43


State 100

   34 whileStmt: "while" condition "do" stmts "end" •

    $default  reduce using rule 34 (whileStmt)


State 101

   32 ifStmt: "if" condition "then" stmts "else" stmts • "end"

    "end"  shift, and go to state 102


State 102

   32 ifStmt: "if" condition "then" stmts "else" stmts "end" •

    $default  reduce using rule 32 (ifStmt)
