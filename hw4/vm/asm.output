Grammar

    0 $accept: program $end

    1 program: textSection dataSection stackSection ".end"

    2 textSection: ".text" entryPoint asmInstrs

    3 entryPoint: addr

    4 addr: label
    5     | unsignednumsym

    6 label: identsym

    7 asmInstrs: asmInstr
    8          | asmInstrs asmInstr

    9 asmInstr: labelOpt instr eolsym

   10 labelOpt: label ":"
   11         | empty

   12 empty: Îµ

   13 instr: noArgInstr
   14      | twoRegCompInstr
   15      | twoRegNoOffsetsInstr
   16      | noTargetOffsetInstr
   17      | noSourceOffsetInstr
   18      | oneRegOffsetArgInstr
   19      | oneRegArgInstr
   20      | oneRegOffsetInstr
   21      | shiftInstr
   22      | argOnlyInstr
   23      | immedArithInstr
   24      | immedBoolInstr
   25      | branchTestInstr
   26      | jumpInstr
   27      | syscallInstr

   28 noArgInstr: noArgOp

   29 noArgOp: "NOP"
   30        | "RTN"

   31 twoRegCompInstr: twoRegCompOp regsym "," offset "," regsym "," offset

   32 twoRegCompOp: "ADD"
   33             | "SUB"
   34             | "CPW"
   35             | "AND"
   36             | "BOR"
   37             | "NOR"
   38             | "XOR"
   39             | "SCA"
   40             | "LWI"
   41             | "NEG"

   42 offset: number

   43 number: sign unsignednumsym

   44 sign: "+"
   45     | "-"
   46     | empty

   47 twoRegNoOffsetsInstr: twoRegNoOffsetsOp regsym "," regsym

   48 twoRegNoOffsetsOp: "CPR"

   49 noTargetOffsetInstr: noTargetOffsetOp regsym "," regsym "," offset

   50 noTargetOffsetOp: "LWR"

   51 noSourceOffsetInstr: noSourceOffsetOp regsym "," offset "," regsym

   52 noSourceOffsetOp: "SWR"

   53 oneRegOffsetArgInstr: oneRegOffsetArgOp regsym "," offset "," arg

   54 oneRegOffsetArgOp: "LIT"

   55 arg: number

   56 oneRegArgInstr: oneRegArgOp regsym "," arg

   57 oneRegArgOp: "ARI"
   58            | "SRI"

   59 oneRegOffsetInstr: oneRegOffsetOp regsym "," offset

   60 oneRegOffsetOp: "MUL"
   61               | "DIV"
   62               | "CFHI"
   63               | "CFLO"
   64               | "JMP"
   65               | "CSI"

   66 shiftInstr: shiftOp regsym "," offset "," shift

   67 shiftOp: "SLL"
   68        | "SRL"

   69 shift: unsignednumsym

   70 argOnlyInstr: argOnlyOp arg

   71 argOnlyOp: "JREL"

   72 immedArithInstr: immedArithOp regsym "," offset "," immed

   73 immedArithOp: "ADDI"

   74 immed: number

   75 immedBoolInstr: immedBoolOp regsym "," offset "," uimmed

   76 immedBoolOp: "ANDI"
   77            | "BORI"
   78            | "XORI"
   79            | "NORI"

   80 uimmed: unsignednumsym

   81 branchTestInstr: branchTestOp regsym "," offset "," immed

   82 branchTestOp: "BEQ"
   83             | "BGEZ"
   84             | "BGTZ"
   85             | "BLEZ"
   86             | "BLTZ"
   87             | "BNE"

   88 jumpInstr: jumpOp addr

   89 jumpOp: "JMPA"
   90       | "CALL"

   91 syscallInstr: offsetOnlySyscall
   92             | regOffsetSyscall
   93             | noArgSyscall

   94 offsetOnlySyscall: offsetOnlySyscallOp offset

   95 offsetOnlySyscallOp: "EXIT"

   96 regOffsetSyscall: regOffsetSyscallOp regsym "," offset

   97 regOffsetSyscallOp: "PSTR"
   98                   | "PINT"
   99                   | "PCH"
  100                   | "RCH"

  101 noArgSyscall: noArgSyscallOp

  102 noArgSyscallOp: "STRA"
  103               | "NOTR"

  104 dataSection: ".data" staticStartAddr staticDecls

  105 staticStartAddr: unsignednumsym

  106 staticDecls: empty
  107            | staticDecls staticDecl

  108 staticDecl: dataSize identsym initializerOpt eolsym

  109 dataSize: "WORD"
  110         | "CHAR"
  111         | "STRING" "[" unsignednumsym "]"

  112 initializerOpt: "=" number
  113               | "=" charliteralsym
  114               | "=" stringliteralsym
  115               | empty

  116 stackSection: ".stack" stackBottomAddr

  117 stackBottomAddr: unsignednumsym


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    eolsym (258) 9 108
    identsym <ident> (259) 6 108
    unsignednumsym <unsignednum> (260) 5 43 69 80 105 111 117
    "+" <token> (261) 44
    "-" <token> (262) 45
    "," (263) 31 47 49 51 53 56 59 66 72 75 81 96
    ".text" <token> (264) 2
    ".data" <token> (265) 104
    ".stack" <token> (266) 116
    ".end" (267) 1
    ":" (268) 10
    "[" <token> (269) 111
    "]" <token> (270) 111
    "=" <token> (271) 112 113 114
    "NOP" <token> (272) 29
    "ADD" <token> (273) 32
    "SUB" <token> (274) 33
    "CPW" <token> (275) 34
    "CPR" <token> (276) 48
    "AND" <token> (277) 35
    "BOR" <token> (278) 36
    "NOR" <token> (279) 37
    "XOR" <token> (280) 38
    "LWR" <token> (281) 50
    "SWR" <token> (282) 52
    "SCA" <token> (283) 39
    "LWI" <token> (284) 40
    "NEG" <token> (285) 41
    "LIT" <token> (286) 54
    "ARI" <token> (287) 57
    "SRI" <token> (288) 58
    "MUL" <token> (289) 60
    "DIV" <token> (290) 61
    "CFHI" <token> (291) 62
    "CFLO" <token> (292) 63
    "SLL" <token> (293) 67
    "SRL" <token> (294) 68
    "JMP" <token> (295) 64
    "JREL" <token> (296) 71
    "ADDI" <token> (297) 73
    "ANDI" <token> (298) 76
    "BORI" <token> (299) 77
    "NORI" <token> (300) 79
    "XORI" <token> (301) 78
    "BEQ" <token> (302) 82
    "BGEZ" <token> (303) 83
    "BLEZ" <token> (304) 85
    "BGTZ" <token> (305) 84
    "BLTZ" <token> (306) 86
    "BNE" <token> (307) 87
    "CSI" <token> (308) 65
    "JMPA" <token> (309) 89
    "CALL" <token> (310) 90
    "RTN" <token> (311) 30
    "EXIT" <token> (312) 95
    "PSTR" <token> (313) 97
    "PINT" <token> (314) 98
    "PCH" <token> (315) 99
    "RCH" <token> (316) 100
    "STRA" <token> (317) 102
    "NOTR" <token> (318) 103
    regsym <reg> (319) 31 47 49 51 53 56 59 66 72 75 81 96
    "WORD" <token> (320) 109
    "CHAR" <token> (321) 110
    "STRING" <token> (322) 111
    charliteralsym <charlit> (323) 113
    stringliteralsym <stringlit> (324) 114


Nonterminals, with rules where they appear

    $accept (70)
        on left: 0
    program <program> (71)
        on left: 1
        on right: 0
    textSection <text_section> (72)
        on left: 2
        on right: 1
    entryPoint <addr> (73)
        on left: 3
        on right: 2
    addr <addr> (74)
        on left: 4 5
        on right: 3 88
    label <ident> (75)
        on left: 6
        on right: 4 10
    asmInstrs <asm_instrs> (76)
        on left: 7 8
        on right: 2 8
    asmInstr <asm_instr> (77)
        on left: 9
        on right: 7 8
    labelOpt <label_opt> (78)
        on left: 10 11
        on right: 9
    empty <empty> (79)
        on left: 12
        on right: 11 46 106 115
    instr <instr> (80)
        on left: 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 9
    noArgInstr <instr> (81)
        on left: 28
        on right: 13
    noArgOp <token> (82)
        on left: 29 30
        on right: 28
    twoRegCompInstr <instr> (83)
        on left: 31
        on right: 14
    twoRegCompOp <token> (84)
        on left: 32 33 34 35 36 37 38 39 40 41
        on right: 31
    offset <number> (85)
        on left: 42
        on right: 31 49 51 53 59 66 72 75 81 94 96
    number <number> (86)
        on left: 43
        on right: 42 55 74 112
    sign <token> (87)
        on left: 44 45 46
        on right: 43
    twoRegNoOffsetsInstr <instr> (88)
        on left: 47
        on right: 15
    twoRegNoOffsetsOp <token> (89)
        on left: 48
        on right: 47
    noTargetOffsetInstr <instr> (90)
        on left: 49
        on right: 16
    noTargetOffsetOp <token> (91)
        on left: 50
        on right: 49
    noSourceOffsetInstr <instr> (92)
        on left: 51
        on right: 17
    noSourceOffsetOp <token> (93)
        on left: 52
        on right: 51
    oneRegOffsetArgInstr <instr> (94)
        on left: 53
        on right: 18
    oneRegOffsetArgOp <token> (95)
        on left: 54
        on right: 53
    arg <number> (96)
        on left: 55
        on right: 53 56 70
    oneRegArgInstr <instr> (97)
        on left: 56
        on right: 19
    oneRegArgOp <token> (98)
        on left: 57 58
        on right: 56
    oneRegOffsetInstr <instr> (99)
        on left: 59
        on right: 20
    oneRegOffsetOp <token> (100)
        on left: 60 61 62 63 64 65
        on right: 59
    shiftInstr <instr> (101)
        on left: 66
        on right: 21
    shiftOp <token> (102)
        on left: 67 68
        on right: 66
    shift <immed> (103)
        on left: 69
        on right: 66
    argOnlyInstr <instr> (104)
        on left: 70
        on right: 22
    argOnlyOp <token> (105)
        on left: 71
        on right: 70
    immedArithInstr <instr> (106)
        on left: 72
        on right: 23
    immedArithOp <token> (107)
        on left: 73
        on right: 72
    immed <immed> (108)
        on left: 74
        on right: 72 81
    immedBoolInstr <instr> (109)
        on left: 75
        on right: 24
    immedBoolOp <token> (110)
        on left: 76 77 78 79
        on right: 75
    uimmed <immed> (111)
        on left: 80
        on right: 75
    branchTestInstr <instr> (112)
        on left: 81
        on right: 25
    branchTestOp <token> (113)
        on left: 82 83 84 85 86 87
        on right: 81
    jumpInstr <instr> (114)
        on left: 88
        on right: 26
    jumpOp <token> (115)
        on left: 89 90
        on right: 88
    syscallInstr <instr> (116)
        on left: 91 92 93
        on right: 27
    offsetOnlySyscall <instr> (117)
        on left: 94
        on right: 91
    offsetOnlySyscallOp <token> (118)
        on left: 95
        on right: 94
    regOffsetSyscall <instr> (119)
        on left: 96
        on right: 92
    regOffsetSyscallOp <token> (120)
        on left: 97 98 99 100
        on right: 96
    noArgSyscall <instr> (121)
        on left: 101
        on right: 93
    noArgSyscallOp <token> (122)
        on left: 102 103
        on right: 101
    dataSection <data_section> (123)
        on left: 104
        on right: 1
    staticStartAddr <unsignednum> (124)
        on left: 105
        on right: 104
    staticDecls <static_decls> (125)
        on left: 106 107
        on right: 104 107
    staticDecl <static_decl> (126)
        on left: 108
        on right: 107
    dataSize <data_size> (127)
        on left: 109 110 111
        on right: 108
    initializerOpt <initializer> (128)
        on left: 112 113 114 115
        on right: 108
    stackSection <stack_section> (129)
        on left: 116
        on right: 1
    stackBottomAddr <unsignednum> (130)
        on left: 117
        on right: 116


State 0

    0 $accept: â¢ program $end

    ".text"  shift, and go to state 1

    program      go to state 2
    textSection  go to state 3


State 1

    2 textSection: ".text" â¢ entryPoint asmInstrs

    identsym        shift, and go to state 4
    unsignednumsym  shift, and go to state 5

    entryPoint  go to state 6
    addr        go to state 7
    label       go to state 8


State 2

    0 $accept: program â¢ $end

    $end  shift, and go to state 9


State 3

    1 program: textSection â¢ dataSection stackSection ".end"

    ".data"  shift, and go to state 10

    dataSection  go to state 11


State 4

    6 label: identsym â¢

    $default  reduce using rule 6 (label)


State 5

    5 addr: unsignednumsym â¢

    $default  reduce using rule 5 (addr)


State 6

    2 textSection: ".text" entryPoint â¢ asmInstrs

    identsym  shift, and go to state 4

    $default  reduce using rule 12 (empty)

    label      go to state 12
    asmInstrs  go to state 13
    asmInstr   go to state 14
    labelOpt   go to state 15
    empty      go to state 16


State 7

    3 entryPoint: addr â¢

    $default  reduce using rule 3 (entryPoint)


State 8

    4 addr: label â¢

    $default  reduce using rule 4 (addr)


State 9

    0 $accept: program $end â¢

    $default  accept


State 10

  104 dataSection: ".data" â¢ staticStartAddr staticDecls

    unsignednumsym  shift, and go to state 17

    staticStartAddr  go to state 18


State 11

    1 program: textSection dataSection â¢ stackSection ".end"

    ".stack"  shift, and go to state 19

    stackSection  go to state 20


State 12

   10 labelOpt: label â¢ ":"

    ":"  shift, and go to state 21


State 13

    2 textSection: ".text" entryPoint asmInstrs â¢
    8 asmInstrs: asmInstrs â¢ asmInstr

    identsym  shift, and go to state 4

    ".data"   reduce using rule 2 (textSection)
    $default  reduce using rule 12 (empty)

    label     go to state 12
    asmInstr  go to state 22
    labelOpt  go to state 15
    empty     go to state 16


State 14

    7 asmInstrs: asmInstr â¢

    $default  reduce using rule 7 (asmInstrs)


State 15

    9 asmInstr: labelOpt â¢ instr eolsym

    "NOP"   shift, and go to state 23
    "ADD"   shift, and go to state 24
    "SUB"   shift, and go to state 25
    "CPW"   shift, and go to state 26
    "CPR"   shift, and go to state 27
    "AND"   shift, and go to state 28
    "BOR"   shift, and go to state 29
    "NOR"   shift, and go to state 30
    "XOR"   shift, and go to state 31
    "LWR"   shift, and go to state 32
    "SWR"   shift, and go to state 33
    "SCA"   shift, and go to state 34
    "LWI"   shift, and go to state 35
    "NEG"   shift, and go to state 36
    "LIT"   shift, and go to state 37
    "ARI"   shift, and go to state 38
    "SRI"   shift, and go to state 39
    "MUL"   shift, and go to state 40
    "DIV"   shift, and go to state 41
    "CFHI"  shift, and go to state 42
    "CFLO"  shift, and go to state 43
    "SLL"   shift, and go to state 44
    "SRL"   shift, and go to state 45
    "JMP"   shift, and go to state 46
    "JREL"  shift, and go to state 47
    "ADDI"  shift, and go to state 48
    "ANDI"  shift, and go to state 49
    "BORI"  shift, and go to state 50
    "NORI"  shift, and go to state 51
    "XORI"  shift, and go to state 52
    "BEQ"   shift, and go to state 53
    "BGEZ"  shift, and go to state 54
    "BLEZ"  shift, and go to state 55
    "BGTZ"  shift, and go to state 56
    "BLTZ"  shift, and go to state 57
    "BNE"   shift, and go to state 58
    "CSI"   shift, and go to state 59
    "JMPA"  shift, and go to state 60
    "CALL"  shift, and go to state 61
    "RTN"   shift, and go to state 62
    "EXIT"  shift, and go to state 63
    "PSTR"  shift, and go to state 64
    "PINT"  shift, and go to state 65
    "PCH"   shift, and go to state 66
    "RCH"   shift, and go to state 67
    "STRA"  shift, and go to state 68
    "NOTR"  shift, and go to state 69

    instr                 go to state 70
    noArgInstr            go to state 71
    noArgOp               go to state 72
    twoRegCompInstr       go to state 73
    twoRegCompOp          go to state 74
    twoRegNoOffsetsInstr  go to state 75
    twoRegNoOffsetsOp     go to state 76
    noTargetOffsetInstr   go to state 77
    noTargetOffsetOp      go to state 78
    noSourceOffsetInstr   go to state 79
    noSourceOffsetOp      go to state 80
    oneRegOffsetArgInstr  go to state 81
    oneRegOffsetArgOp     go to state 82
    oneRegArgInstr        go to state 83
    oneRegArgOp           go to state 84
    oneRegOffsetInstr     go to state 85
    oneRegOffsetOp        go to state 86
    shiftInstr            go to state 87
    shiftOp               go to state 88
    argOnlyInstr          go to state 89
    argOnlyOp             go to state 90
    immedArithInstr       go to state 91
    immedArithOp          go to state 92
    immedBoolInstr        go to state 93
    immedBoolOp           go to state 94
    branchTestInstr       go to state 95
    branchTestOp          go to state 96
    jumpInstr             go to state 97
    jumpOp                go to state 98
    syscallInstr          go to state 99
    offsetOnlySyscall     go to state 100
    offsetOnlySyscallOp   go to state 101
    regOffsetSyscall      go to state 102
    regOffsetSyscallOp    go to state 103
    noArgSyscall          go to state 104
    noArgSyscallOp        go to state 105


State 16

   11 labelOpt: empty â¢

    $default  reduce using rule 11 (labelOpt)


State 17

  105 staticStartAddr: unsignednumsym â¢

    $default  reduce using rule 105 (staticStartAddr)


State 18

  104 dataSection: ".data" staticStartAddr â¢ staticDecls

    $default  reduce using rule 12 (empty)

    empty        go to state 106
    staticDecls  go to state 107


State 19

  116 stackSection: ".stack" â¢ stackBottomAddr

    unsignednumsym  shift, and go to state 108

    stackBottomAddr  go to state 109


State 20

    1 program: textSection dataSection stackSection â¢ ".end"

    ".end"  shift, and go to state 110


State 21

   10 labelOpt: label ":" â¢

    $default  reduce using rule 10 (labelOpt)


State 22

    8 asmInstrs: asmInstrs asmInstr â¢

    $default  reduce using rule 8 (asmInstrs)


State 23

   29 noArgOp: "NOP" â¢

    $default  reduce using rule 29 (noArgOp)


State 24

   32 twoRegCompOp: "ADD" â¢

    $default  reduce using rule 32 (twoRegCompOp)


State 25

   33 twoRegCompOp: "SUB" â¢

    $default  reduce using rule 33 (twoRegCompOp)


State 26

   34 twoRegCompOp: "CPW" â¢

    $default  reduce using rule 34 (twoRegCompOp)


State 27

   48 twoRegNoOffsetsOp: "CPR" â¢

    $default  reduce using rule 48 (twoRegNoOffsetsOp)


State 28

   35 twoRegCompOp: "AND" â¢

    $default  reduce using rule 35 (twoRegCompOp)


State 29

   36 twoRegCompOp: "BOR" â¢

    $default  reduce using rule 36 (twoRegCompOp)


State 30

   37 twoRegCompOp: "NOR" â¢

    $default  reduce using rule 37 (twoRegCompOp)


State 31

   38 twoRegCompOp: "XOR" â¢

    $default  reduce using rule 38 (twoRegCompOp)


State 32

   50 noTargetOffsetOp: "LWR" â¢

    $default  reduce using rule 50 (noTargetOffsetOp)


State 33

   52 noSourceOffsetOp: "SWR" â¢

    $default  reduce using rule 52 (noSourceOffsetOp)


State 34

   39 twoRegCompOp: "SCA" â¢

    $default  reduce using rule 39 (twoRegCompOp)


State 35

   40 twoRegCompOp: "LWI" â¢

    $default  reduce using rule 40 (twoRegCompOp)


State 36

   41 twoRegCompOp: "NEG" â¢

    $default  reduce using rule 41 (twoRegCompOp)


State 37

   54 oneRegOffsetArgOp: "LIT" â¢

    $default  reduce using rule 54 (oneRegOffsetArgOp)


State 38

   57 oneRegArgOp: "ARI" â¢

    $default  reduce using rule 57 (oneRegArgOp)


State 39

   58 oneRegArgOp: "SRI" â¢

    $default  reduce using rule 58 (oneRegArgOp)


State 40

   60 oneRegOffsetOp: "MUL" â¢

    $default  reduce using rule 60 (oneRegOffsetOp)


State 41

   61 oneRegOffsetOp: "DIV" â¢

    $default  reduce using rule 61 (oneRegOffsetOp)


State 42

   62 oneRegOffsetOp: "CFHI" â¢

    $default  reduce using rule 62 (oneRegOffsetOp)


State 43

   63 oneRegOffsetOp: "CFLO" â¢

    $default  reduce using rule 63 (oneRegOffsetOp)


State 44

   67 shiftOp: "SLL" â¢

    $default  reduce using rule 67 (shiftOp)


State 45

   68 shiftOp: "SRL" â¢

    $default  reduce using rule 68 (shiftOp)


State 46

   64 oneRegOffsetOp: "JMP" â¢

    $default  reduce using rule 64 (oneRegOffsetOp)


State 47

   71 argOnlyOp: "JREL" â¢

    $default  reduce using rule 71 (argOnlyOp)


State 48

   73 immedArithOp: "ADDI" â¢

    $default  reduce using rule 73 (immedArithOp)


State 49

   76 immedBoolOp: "ANDI" â¢

    $default  reduce using rule 76 (immedBoolOp)


State 50

   77 immedBoolOp: "BORI" â¢

    $default  reduce using rule 77 (immedBoolOp)


State 51

   79 immedBoolOp: "NORI" â¢

    $default  reduce using rule 79 (immedBoolOp)


State 52

   78 immedBoolOp: "XORI" â¢

    $default  reduce using rule 78 (immedBoolOp)


State 53

   82 branchTestOp: "BEQ" â¢

    $default  reduce using rule 82 (branchTestOp)


State 54

   83 branchTestOp: "BGEZ" â¢

    $default  reduce using rule 83 (branchTestOp)


State 55

   85 branchTestOp: "BLEZ" â¢

    $default  reduce using rule 85 (branchTestOp)


State 56

   84 branchTestOp: "BGTZ" â¢

    $default  reduce using rule 84 (branchTestOp)


State 57

   86 branchTestOp: "BLTZ" â¢

    $default  reduce using rule 86 (branchTestOp)


State 58

   87 branchTestOp: "BNE" â¢

    $default  reduce using rule 87 (branchTestOp)


State 59

   65 oneRegOffsetOp: "CSI" â¢

    $default  reduce using rule 65 (oneRegOffsetOp)


State 60

   89 jumpOp: "JMPA" â¢

    $default  reduce using rule 89 (jumpOp)


State 61

   90 jumpOp: "CALL" â¢

    $default  reduce using rule 90 (jumpOp)


State 62

   30 noArgOp: "RTN" â¢

    $default  reduce using rule 30 (noArgOp)


State 63

   95 offsetOnlySyscallOp: "EXIT" â¢

    $default  reduce using rule 95 (offsetOnlySyscallOp)


State 64

   97 regOffsetSyscallOp: "PSTR" â¢

    $default  reduce using rule 97 (regOffsetSyscallOp)


State 65

   98 regOffsetSyscallOp: "PINT" â¢

    $default  reduce using rule 98 (regOffsetSyscallOp)


State 66

   99 regOffsetSyscallOp: "PCH" â¢

    $default  reduce using rule 99 (regOffsetSyscallOp)


State 67

  100 regOffsetSyscallOp: "RCH" â¢

    $default  reduce using rule 100 (regOffsetSyscallOp)


State 68

  102 noArgSyscallOp: "STRA" â¢

    $default  reduce using rule 102 (noArgSyscallOp)


State 69

  103 noArgSyscallOp: "NOTR" â¢

    $default  reduce using rule 103 (noArgSyscallOp)


State 70

    9 asmInstr: labelOpt instr â¢ eolsym

    eolsym  shift, and go to state 111


State 71

   13 instr: noArgInstr â¢

    $default  reduce using rule 13 (instr)


State 72

   28 noArgInstr: noArgOp â¢

    $default  reduce using rule 28 (noArgInstr)


State 73

   14 instr: twoRegCompInstr â¢

    $default  reduce using rule 14 (instr)


State 74

   31 twoRegCompInstr: twoRegCompOp â¢ regsym "," offset "," regsym "," offset

    regsym  shift, and go to state 112


State 75

   15 instr: twoRegNoOffsetsInstr â¢

    $default  reduce using rule 15 (instr)


State 76

   47 twoRegNoOffsetsInstr: twoRegNoOffsetsOp â¢ regsym "," regsym

    regsym  shift, and go to state 113


State 77

   16 instr: noTargetOffsetInstr â¢

    $default  reduce using rule 16 (instr)


State 78

   49 noTargetOffsetInstr: noTargetOffsetOp â¢ regsym "," regsym "," offset

    regsym  shift, and go to state 114


State 79

   17 instr: noSourceOffsetInstr â¢

    $default  reduce using rule 17 (instr)


State 80

   51 noSourceOffsetInstr: noSourceOffsetOp â¢ regsym "," offset "," regsym

    regsym  shift, and go to state 115


State 81

   18 instr: oneRegOffsetArgInstr â¢

    $default  reduce using rule 18 (instr)


State 82

   53 oneRegOffsetArgInstr: oneRegOffsetArgOp â¢ regsym "," offset "," arg

    regsym  shift, and go to state 116


State 83

   19 instr: oneRegArgInstr â¢

    $default  reduce using rule 19 (instr)


State 84

   56 oneRegArgInstr: oneRegArgOp â¢ regsym "," arg

    regsym  shift, and go to state 117


State 85

   20 instr: oneRegOffsetInstr â¢

    $default  reduce using rule 20 (instr)


State 86

   59 oneRegOffsetInstr: oneRegOffsetOp â¢ regsym "," offset

    regsym  shift, and go to state 118


State 87

   21 instr: shiftInstr â¢

    $default  reduce using rule 21 (instr)


State 88

   66 shiftInstr: shiftOp â¢ regsym "," offset "," shift

    regsym  shift, and go to state 119


State 89

   22 instr: argOnlyInstr â¢

    $default  reduce using rule 22 (instr)


State 90

   70 argOnlyInstr: argOnlyOp â¢ arg

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    number  go to state 123
    sign    go to state 124
    arg     go to state 125


State 91

   23 instr: immedArithInstr â¢

    $default  reduce using rule 23 (instr)


State 92

   72 immedArithInstr: immedArithOp â¢ regsym "," offset "," immed

    regsym  shift, and go to state 126


State 93

   24 instr: immedBoolInstr â¢

    $default  reduce using rule 24 (instr)


State 94

   75 immedBoolInstr: immedBoolOp â¢ regsym "," offset "," uimmed

    regsym  shift, and go to state 127


State 95

   25 instr: branchTestInstr â¢

    $default  reduce using rule 25 (instr)


State 96

   81 branchTestInstr: branchTestOp â¢ regsym "," offset "," immed

    regsym  shift, and go to state 128


State 97

   26 instr: jumpInstr â¢

    $default  reduce using rule 26 (instr)


State 98

   88 jumpInstr: jumpOp â¢ addr

    identsym        shift, and go to state 4
    unsignednumsym  shift, and go to state 5

    addr   go to state 129
    label  go to state 8


State 99

   27 instr: syscallInstr â¢

    $default  reduce using rule 27 (instr)


State 100

   91 syscallInstr: offsetOnlySyscall â¢

    $default  reduce using rule 91 (syscallInstr)


State 101

   94 offsetOnlySyscall: offsetOnlySyscallOp â¢ offset

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    offset  go to state 130
    number  go to state 131
    sign    go to state 124


State 102

   92 syscallInstr: regOffsetSyscall â¢

    $default  reduce using rule 92 (syscallInstr)


State 103

   96 regOffsetSyscall: regOffsetSyscallOp â¢ regsym "," offset

    regsym  shift, and go to state 132


State 104

   93 syscallInstr: noArgSyscall â¢

    $default  reduce using rule 93 (syscallInstr)


State 105

  101 noArgSyscall: noArgSyscallOp â¢

    $default  reduce using rule 101 (noArgSyscall)


State 106

  106 staticDecls: empty â¢

    $default  reduce using rule 106 (staticDecls)


State 107

  104 dataSection: ".data" staticStartAddr staticDecls â¢
  107 staticDecls: staticDecls â¢ staticDecl

    "WORD"    shift, and go to state 133
    "CHAR"    shift, and go to state 134
    "STRING"  shift, and go to state 135

    $default  reduce using rule 104 (dataSection)

    staticDecl  go to state 136
    dataSize    go to state 137


State 108

  117 stackBottomAddr: unsignednumsym â¢

    $default  reduce using rule 117 (stackBottomAddr)


State 109

  116 stackSection: ".stack" stackBottomAddr â¢

    $default  reduce using rule 116 (stackSection)


State 110

    1 program: textSection dataSection stackSection ".end" â¢

    $default  reduce using rule 1 (program)


State 111

    9 asmInstr: labelOpt instr eolsym â¢

    $default  reduce using rule 9 (asmInstr)


State 112

   31 twoRegCompInstr: twoRegCompOp regsym â¢ "," offset "," regsym "," offset

    ","  shift, and go to state 138


State 113

   47 twoRegNoOffsetsInstr: twoRegNoOffsetsOp regsym â¢ "," regsym

    ","  shift, and go to state 139


State 114

   49 noTargetOffsetInstr: noTargetOffsetOp regsym â¢ "," regsym "," offset

    ","  shift, and go to state 140


State 115

   51 noSourceOffsetInstr: noSourceOffsetOp regsym â¢ "," offset "," regsym

    ","  shift, and go to state 141


State 116

   53 oneRegOffsetArgInstr: oneRegOffsetArgOp regsym â¢ "," offset "," arg

    ","  shift, and go to state 142


State 117

   56 oneRegArgInstr: oneRegArgOp regsym â¢ "," arg

    ","  shift, and go to state 143


State 118

   59 oneRegOffsetInstr: oneRegOffsetOp regsym â¢ "," offset

    ","  shift, and go to state 144


State 119

   66 shiftInstr: shiftOp regsym â¢ "," offset "," shift

    ","  shift, and go to state 145


State 120

   44 sign: "+" â¢

    $default  reduce using rule 44 (sign)


State 121

   45 sign: "-" â¢

    $default  reduce using rule 45 (sign)


State 122

   46 sign: empty â¢

    $default  reduce using rule 46 (sign)


State 123

   55 arg: number â¢

    $default  reduce using rule 55 (arg)


State 124

   43 number: sign â¢ unsignednumsym

    unsignednumsym  shift, and go to state 146


State 125

   70 argOnlyInstr: argOnlyOp arg â¢

    $default  reduce using rule 70 (argOnlyInstr)


State 126

   72 immedArithInstr: immedArithOp regsym â¢ "," offset "," immed

    ","  shift, and go to state 147


State 127

   75 immedBoolInstr: immedBoolOp regsym â¢ "," offset "," uimmed

    ","  shift, and go to state 148


State 128

   81 branchTestInstr: branchTestOp regsym â¢ "," offset "," immed

    ","  shift, and go to state 149


State 129

   88 jumpInstr: jumpOp addr â¢

    $default  reduce using rule 88 (jumpInstr)


State 130

   94 offsetOnlySyscall: offsetOnlySyscallOp offset â¢

    $default  reduce using rule 94 (offsetOnlySyscall)


State 131

   42 offset: number â¢

    $default  reduce using rule 42 (offset)


State 132

   96 regOffsetSyscall: regOffsetSyscallOp regsym â¢ "," offset

    ","  shift, and go to state 150


State 133

  109 dataSize: "WORD" â¢

    $default  reduce using rule 109 (dataSize)


State 134

  110 dataSize: "CHAR" â¢

    $default  reduce using rule 110 (dataSize)


State 135

  111 dataSize: "STRING" â¢ "[" unsignednumsym "]"

    "["  shift, and go to state 151


State 136

  107 staticDecls: staticDecls staticDecl â¢

    $default  reduce using rule 107 (staticDecls)


State 137

  108 staticDecl: dataSize â¢ identsym initializerOpt eolsym

    identsym  shift, and go to state 152


State 138

   31 twoRegCompInstr: twoRegCompOp regsym "," â¢ offset "," regsym "," offset

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    offset  go to state 153
    number  go to state 131
    sign    go to state 124


State 139

   47 twoRegNoOffsetsInstr: twoRegNoOffsetsOp regsym "," â¢ regsym

    regsym  shift, and go to state 154


State 140

   49 noTargetOffsetInstr: noTargetOffsetOp regsym "," â¢ regsym "," offset

    regsym  shift, and go to state 155


State 141

   51 noSourceOffsetInstr: noSourceOffsetOp regsym "," â¢ offset "," regsym

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    offset  go to state 156
    number  go to state 131
    sign    go to state 124


State 142

   53 oneRegOffsetArgInstr: oneRegOffsetArgOp regsym "," â¢ offset "," arg

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    offset  go to state 157
    number  go to state 131
    sign    go to state 124


State 143

   56 oneRegArgInstr: oneRegArgOp regsym "," â¢ arg

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    number  go to state 123
    sign    go to state 124
    arg     go to state 158


State 144

   59 oneRegOffsetInstr: oneRegOffsetOp regsym "," â¢ offset

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    offset  go to state 159
    number  go to state 131
    sign    go to state 124


State 145

   66 shiftInstr: shiftOp regsym "," â¢ offset "," shift

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    offset  go to state 160
    number  go to state 131
    sign    go to state 124


State 146

   43 number: sign unsignednumsym â¢

    $default  reduce using rule 43 (number)


State 147

   72 immedArithInstr: immedArithOp regsym "," â¢ offset "," immed

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    offset  go to state 161
    number  go to state 131
    sign    go to state 124


State 148

   75 immedBoolInstr: immedBoolOp regsym "," â¢ offset "," uimmed

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    offset  go to state 162
    number  go to state 131
    sign    go to state 124


State 149

   81 branchTestInstr: branchTestOp regsym "," â¢ offset "," immed

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    offset  go to state 163
    number  go to state 131
    sign    go to state 124


State 150

   96 regOffsetSyscall: regOffsetSyscallOp regsym "," â¢ offset

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    offset  go to state 164
    number  go to state 131
    sign    go to state 124


State 151

  111 dataSize: "STRING" "[" â¢ unsignednumsym "]"

    unsignednumsym  shift, and go to state 165


State 152

  108 staticDecl: dataSize identsym â¢ initializerOpt eolsym

    "="  shift, and go to state 166

    $default  reduce using rule 12 (empty)

    empty           go to state 167
    initializerOpt  go to state 168


State 153

   31 twoRegCompInstr: twoRegCompOp regsym "," offset â¢ "," regsym "," offset

    ","  shift, and go to state 169


State 154

   47 twoRegNoOffsetsInstr: twoRegNoOffsetsOp regsym "," regsym â¢

    $default  reduce using rule 47 (twoRegNoOffsetsInstr)


State 155

   49 noTargetOffsetInstr: noTargetOffsetOp regsym "," regsym â¢ "," offset

    ","  shift, and go to state 170


State 156

   51 noSourceOffsetInstr: noSourceOffsetOp regsym "," offset â¢ "," regsym

    ","  shift, and go to state 171


State 157

   53 oneRegOffsetArgInstr: oneRegOffsetArgOp regsym "," offset â¢ "," arg

    ","  shift, and go to state 172


State 158

   56 oneRegArgInstr: oneRegArgOp regsym "," arg â¢

    $default  reduce using rule 56 (oneRegArgInstr)


State 159

   59 oneRegOffsetInstr: oneRegOffsetOp regsym "," offset â¢

    $default  reduce using rule 59 (oneRegOffsetInstr)


State 160

   66 shiftInstr: shiftOp regsym "," offset â¢ "," shift

    ","  shift, and go to state 173


State 161

   72 immedArithInstr: immedArithOp regsym "," offset â¢ "," immed

    ","  shift, and go to state 174


State 162

   75 immedBoolInstr: immedBoolOp regsym "," offset â¢ "," uimmed

    ","  shift, and go to state 175


State 163

   81 branchTestInstr: branchTestOp regsym "," offset â¢ "," immed

    ","  shift, and go to state 176


State 164

   96 regOffsetSyscall: regOffsetSyscallOp regsym "," offset â¢

    $default  reduce using rule 96 (regOffsetSyscall)


State 165

  111 dataSize: "STRING" "[" unsignednumsym â¢ "]"

    "]"  shift, and go to state 177


State 166

  112 initializerOpt: "=" â¢ number
  113               | "=" â¢ charliteralsym
  114               | "=" â¢ stringliteralsym

    "+"               shift, and go to state 120
    "-"               shift, and go to state 121
    charliteralsym    shift, and go to state 178
    stringliteralsym  shift, and go to state 179

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    number  go to state 180
    sign    go to state 124


State 167

  115 initializerOpt: empty â¢

    $default  reduce using rule 115 (initializerOpt)


State 168

  108 staticDecl: dataSize identsym initializerOpt â¢ eolsym

    eolsym  shift, and go to state 181


State 169

   31 twoRegCompInstr: twoRegCompOp regsym "," offset "," â¢ regsym "," offset

    regsym  shift, and go to state 182


State 170

   49 noTargetOffsetInstr: noTargetOffsetOp regsym "," regsym "," â¢ offset

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    offset  go to state 183
    number  go to state 131
    sign    go to state 124


State 171

   51 noSourceOffsetInstr: noSourceOffsetOp regsym "," offset "," â¢ regsym

    regsym  shift, and go to state 184


State 172

   53 oneRegOffsetArgInstr: oneRegOffsetArgOp regsym "," offset "," â¢ arg

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    number  go to state 123
    sign    go to state 124
    arg     go to state 185


State 173

   66 shiftInstr: shiftOp regsym "," offset "," â¢ shift

    unsignednumsym  shift, and go to state 186

    shift  go to state 187


State 174

   72 immedArithInstr: immedArithOp regsym "," offset "," â¢ immed

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    number  go to state 188
    sign    go to state 124
    immed   go to state 189


State 175

   75 immedBoolInstr: immedBoolOp regsym "," offset "," â¢ uimmed

    unsignednumsym  shift, and go to state 190

    uimmed  go to state 191


State 176

   81 branchTestInstr: branchTestOp regsym "," offset "," â¢ immed

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    number  go to state 188
    sign    go to state 124
    immed   go to state 192


State 177

  111 dataSize: "STRING" "[" unsignednumsym "]" â¢

    $default  reduce using rule 111 (dataSize)


State 178

  113 initializerOpt: "=" charliteralsym â¢

    $default  reduce using rule 113 (initializerOpt)


State 179

  114 initializerOpt: "=" stringliteralsym â¢

    $default  reduce using rule 114 (initializerOpt)


State 180

  112 initializerOpt: "=" number â¢

    $default  reduce using rule 112 (initializerOpt)


State 181

  108 staticDecl: dataSize identsym initializerOpt eolsym â¢

    $default  reduce using rule 108 (staticDecl)


State 182

   31 twoRegCompInstr: twoRegCompOp regsym "," offset "," regsym â¢ "," offset

    ","  shift, and go to state 193


State 183

   49 noTargetOffsetInstr: noTargetOffsetOp regsym "," regsym "," offset â¢

    $default  reduce using rule 49 (noTargetOffsetInstr)


State 184

   51 noSourceOffsetInstr: noSourceOffsetOp regsym "," offset "," regsym â¢

    $default  reduce using rule 51 (noSourceOffsetInstr)


State 185

   53 oneRegOffsetArgInstr: oneRegOffsetArgOp regsym "," offset "," arg â¢

    $default  reduce using rule 53 (oneRegOffsetArgInstr)


State 186

   69 shift: unsignednumsym â¢

    $default  reduce using rule 69 (shift)


State 187

   66 shiftInstr: shiftOp regsym "," offset "," shift â¢

    $default  reduce using rule 66 (shiftInstr)


State 188

   74 immed: number â¢

    $default  reduce using rule 74 (immed)


State 189

   72 immedArithInstr: immedArithOp regsym "," offset "," immed â¢

    $default  reduce using rule 72 (immedArithInstr)


State 190

   80 uimmed: unsignednumsym â¢

    $default  reduce using rule 80 (uimmed)


State 191

   75 immedBoolInstr: immedBoolOp regsym "," offset "," uimmed â¢

    $default  reduce using rule 75 (immedBoolInstr)


State 192

   81 branchTestInstr: branchTestOp regsym "," offset "," immed â¢

    $default  reduce using rule 81 (branchTestInstr)


State 193

   31 twoRegCompInstr: twoRegCompOp regsym "," offset "," regsym "," â¢ offset

    "+"  shift, and go to state 120
    "-"  shift, and go to state 121

    $default  reduce using rule 12 (empty)

    empty   go to state 122
    offset  go to state 194
    number  go to state 131
    sign    go to state 124


State 194

   31 twoRegCompInstr: twoRegCompOp regsym "," offset "," regsym "," offset â¢

    $default  reduce using rule 31 (twoRegCompInstr)
